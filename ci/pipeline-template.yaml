# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
  - name: repository # name of the parameter; required
    type: string # data type of the parameter; required
  - name: multiarch
    type: string
    default: false
    values:
      - true
      - false



stages:
  - stage: Docker
    displayName: Build and Push Docker Image
    jobs:
      - job: Build_Push
        displayName: Build and Push Dockerimage
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Docker@2
            inputs:
              containerRegistry: 'GHCR'
              command: 'login'
            displayName: 'Login to GHCR'

          - script: "docker pull ghcr.io/viertel97/${{parameters.repository}}:latest"
            displayName: Pull latest for layer caching
            continueOnError: true

          - ${{ if eq(parameters.multiarch, 'false') }}:
              - task: Bash@3
                inputs:
                  targetType: 'inline'
                  script: |
                    docker build --cache-from=ghcr.io/viertel97/${{parameters.repository}}:latest --build-arg PAT=${PAT} -t ghcr.io/viertel97/${{parameters.repository}}:latest -f Dockerfile .
                    docker push ghcr.io/viertel97/${{parameters.repository}}:latest
                displayName: 'Build and Push Docker Image'

          - ${{ else }}:
              - task: Bash@3
                inputs:
                  targetType: 'inline'
                  script: |
                    docker buildx create --use
                    docker buildx inspect --bootstrap
                    docker buildx build --cache-from=ghcr.io/viertel97/${{parameters.repository}}:latest --build-arg PAT=${PAT} --push --platform linux/amd64,linux/arm64 -t ghcr.io/viertel97/${{parameters.repository}}:latest -f Dockerfile .
                    docker buildx stop
                displayName: 'Build and Push Multi-Platform Docker Image'
